from pymavlink import mavutil
import time
pixhawk_master = None
pwm_channels = {}  # l∆∞u to√†n b·ªô pwm k√™nh 1-16
servo_function_map = {
    0: "Disabled",
    1: "RCPassThru",
    33: "Motor1",
    34: "Motor2",
    51: "RCIN1",
    52: "RCIN2",
    70: "Gripper",
    73: "Camera Trigger",
    80: "Landing Gear",
    120: "Relay1"
}

def set_master(master):
    global pixhawk_master
    pixhawk_master = master
def set_pwm_channels(pwm_dict):
    global pwm_channels
    pwm_channels = pwm_dict
   
def get_pwm_channel(ch):
    return pwm_channels.get(f"ch{ch}")
    
def get_all_pwm():
    return pwm_channels
def set_param_value(param_id: str, value: int):
    global pixhawk_master
    if pixhawk_master is None:
        print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi Pixhawk")
        return False, "Ch∆∞a c√≥ k·∫øt n·ªëi Pixhawk"
    
    try:
        # G·ª≠i l·ªánh ƒë·∫∑t tham s·ªë
        pixhawk_master.mav.param_set_send(
            pixhawk_master.target_system,
            pixhawk_master.target_component,
            param_id.encode('utf-8'),
            value,
            mavutil.mavlink.MAV_PARAM_TYPE_INT32
        )
        print(f"ƒê√£ g·ª≠i l·ªánh ƒë·∫∑t {param_id} = {value}")
        time.sleep(1)  # Ch·ªù Pixhawk x·ª≠ l√Ω
        
        # ƒê·ªçc l·∫°i tham s·ªë
        param_value = read_parameter(param_id)
        if param_value is not None:
            param_value = int(param_value)
         
            if param_value == value:
                return True
            else:
                return False
        else:
            return False, f"Kh√¥ng th·ªÉ ƒë·ªçc gi√° tr·ªã {param_id}"
    except Exception as e:
        print(f"L·ªói khi ƒë·∫∑t tham s·ªë {param_id}: {str(e)}")
        return False, f"L·ªói khi ƒë·∫∑t tham s·ªë {param_id}: {str(e)}"

def read_parameter(param_id: str):
    global pixhawk_master
    if pixhawk_master is None:
        print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi Pixhawk")
        return None
    
    for attempt in range(3):  # Th·ª≠ 3 l·∫ßn
        try:
            pixhawk_master.mav.param_request_read_send(
                pixhawk_master.target_system,
                pixhawk_master.target_component,
                param_id.encode('utf-8'),
                -1
            )
            timeout = time.time() + 10  # TƒÉng timeout
            while time.time() < timeout:
                msg = pixhawk_master.recv_match(type='PARAM_VALUE', blocking=True, timeout=1)
                if msg and msg.param_id == param_id:
                    return msg.param_value
                time.sleep(0.1)
            print(f"L·ªói: Timeout khi ƒë·ªçc {param_id} (l·∫ßn {attempt + 1})")
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc tham s·ªë {param_id} (l·∫ßn {attempt + 1}): {str(e)}")
        time.sleep(1)  # Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i
    return None


def send_pwm(channel, pwm_value, step=10, delay=50):
    global pixhawk_master
    if pixhawk_master is None:
        print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi Pixhawk ƒë·ªÉ g·ª≠i PWM")
        return False

    if not (800 <= pwm_value <= 2200):
        print(f"‚ùå PWM {pwm_value} ngo√†i gi·ªõi h·∫°n an to√†n (900‚Äì2100¬µs)")
        return False

    current_pwm = get_pwm_channel(channel)

    if current_pwm is None:
        print(f"‚ö†Ô∏è Kh√¥ng c√≥ gi√° tr·ªã PWM hi·ªán t·∫°i cho k√™nh {channel}, d√πng m·∫∑c ƒë·ªãnh 1500")
        current_pwm = 1500

    if step <= 0 or delay <= 0 or abs(current_pwm - pwm_value) <= step:
        print(f"üì§ G·ª≠i PWM tr·ª±c ti·∫øp {pwm_value} ¬µs t·ªõi k√™nh {channel}")
        pixhawk_master.mav.command_long_send(
            pixhawk_master.target_system,
            pixhawk_master.target_component,
            183, 0, channel, pwm_value, 0, 0, 0, 0, 0
        )
        return True

    while current_pwm != pwm_value:
        if pwm_value > current_pwm:
            current_pwm = min(current_pwm + step, pwm_value)
            
        else:
            current_pwm = max(current_pwm - step, pwm_value)

        try:
            pixhawk_master.mav.command_long_send(
            pixhawk_master.target_system,
            pixhawk_master.target_component,
            183, 0, channel, current_pwm, 0, 0, 0, 0, 0   )
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i PWM: {e}")
            return False
        time.sleep(delay / 1000.0)

    print(f"‚úÖ G·ª≠i PWM {pwm_value} ¬µs th√†nh c√¥ng t·ªõi k√™nh {channel}")
    return True

def send_custom_command(command_id, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0):
    global pixhawk_master

    if pixhawk_master is None:
        print("‚ùå Pixhawk ch∆∞a k·∫øt n·ªëi, kh√¥ng g·ª≠i ƒë∆∞·ª£c l·ªánh.")
        return False

    # Debug: In ra c√°c gi√° tr·ªã tham s·ªë ƒë∆∞·ª£c nh·∫≠n
    print(f"üåü G·ª≠i l·ªánh: command_id={command_id}, param1={param1}, param2={param2}, param3={param3}, param4={param4}, param5={param5}, param6={param6}, param7={param7}")

    try:
        # G·ª≠i l·ªánh y√™u c·∫ßu reboot
        pixhawk_master.mav.command_long_send(
            pixhawk_master.target_system,
            pixhawk_master.target_component,
            command_id,
            1,  # Confirmation y√™u c·∫ßu x√°c nh·∫≠n
            param1,
            param2,
            param3,
            param4,
            param5,
            param6,
            param7
        )

      
        return True
      
    except Exception as e:
        # Debug: In ra l·ªói n·∫øu c√≥
        print(f"‚ùå L·ªói khi g·ª≠i l·ªánh: {e}")
        return False

def send_arm_command():
    global pixhawk_master
    if pixhawk_master is None:
        print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi Pixhawk ƒë·ªÉ g·ª≠i l·ªánh")
        return False

    # Chuy·ªÉn sang ch·∫ø ƒë·ªô MANUAL tr∆∞·ªõc khi arm 
    mode = 'MANUAL'
    try:
        mode_id = pixhawk_master.mode_mapping()[mode]
    except Exception as e:
        print(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c mode_id cho {mode}: {e}")
        return False

    pixhawk_master.mav.set_mode_send(
        pixhawk_master.target_system,
        mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
        mode_id
    )

    # G·ª≠i l·ªánh ARM
    pixhawk_master.mav.command_long_send(
        pixhawk_master.target_system, pixhawk_master.target_component,
        mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM,
        0,  # confirmation
        1, 0, 0, 0, 0, 0, 0  # 1 = arm, 0 = disarm
    )

    # ƒê·ª£i ph·∫£n h·ªìi ACK
    ack = pixhawk_master.recv_match(type='COMMAND_ACK', blocking=True)
    print("‚úÖ ARM ACK:", ack)
    return True
def send_mission(waypoints):
    global pixhawk_master
    if pixhawk_master is None:
        return False, "Ch∆∞a k·∫øt n·ªëi Pixhawk"

    try:
        # Clear old mission
        pixhawk_master.mav.mission_clear_all_send(
            pixhawk_master.target_system,
            pixhawk_master.target_component
        )
        time.sleep(1)

        # G·ª≠i s·ªë l∆∞·ª£ng mission
        pixhawk_master.mav.mission_count_send(
            pixhawk_master.target_system,
            pixhawk_master.target_component,
            len(waypoints)
        )

        for wp in waypoints:
            pixhawk_master.mav.mission_item_send(
                pixhawk_master.target_system,
                pixhawk_master.target_component,
                wp.seq,
                wp.frame,
                wp.command,
                wp.current,
                wp.autocontinue,
                wp.param1,
                wp.param2,
                wp.param3,
                wp.param4,
                wp.x,
                wp.y,
                wp.z
            )
            time.sleep(0.2)

        # Ch·ªù nh·∫≠n mission ack
        ack = pixhawk_master.recv_match(type='MISSION_ACK', blocking=True, timeout=5)
        if ack:
            return True, [wp.dict() for wp in waypoints]
        else:
            return False, "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c MISSION_ACK"

    except Exception as e:
        return False, str(e)

def start_mission():
    global pixhawk_master
    if pixhawk_master is None:
        print("‚ùå Pixhawk ch∆∞a k·∫øt n·ªëi.")
        return False

    # Chuy·ªÉn sang ch·∫ø ƒë·ªô AUTO
    mode = 'AUTO'
    try:
        mode_id = pixhawk_master.mode_mapping()[mode]
    except Exception as e:
        print(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c mode_id cho {mode}: {e}")
        return False

    pixhawk_master.mav.set_mode_send(
        pixhawk_master.target_system,
        mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
        mode_id
    )

    print("üöÄ ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô AUTO. Mission s·∫Ω t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu.")
    return True
